#pragma once

#if defined(_WIN32) || defined(__CYGWIN__)
  #define CHESS_API __declspec(dllexport)
#else
  #define CHESS_API
#endif

#ifndef MAGIC_BITBOARDS_H
#define MAGIC_BITBOARDS_H

#define SQUARE_COUNT 64
#define MAX_OCCUPANCY_BITS 12 // Max relevant bits for rook/bishop

// Magic entry for a square
struct MagicEntry{
    unsigned long long attack_mask;   // Relevant squares
    unsigned long long magic_number;  // Magic constant
    int relevant_bits;      // Number of bits in attack_mask
    unsigned long long * move_table;   // Pointer to move bitboards
};

// Global tables, defined in magic_bitboards.c
static struct MagicEntry rook_magics[SQUARE_COUNT];
static struct MagicEntry bishop_magics[SQUARE_COUNT];

// Precomputed rook magics (sourced from Stockfish/Wiki)
static const unsigned long long rook_magic_numbers[SQUARE_COUNT] = {
  612498416294952992ULL,  2377936612260610304ULL,  36037730568766080ULL,
  72075188908654856ULL,   144119655536003584ULL,   5836666216720237568ULL,
  9403535813175676288ULL, 1765412295174865024ULL,  3476919663777054752ULL,
  288300746238222339ULL,  9288811671472386ULL,     146648600474026240ULL,
  3799946587537536ULL,    704237264700928ULL,      10133167915730964ULL,
  2305983769267405952ULL, 9223634270415749248ULL,  10344480540467205ULL,
  9376496898355021824ULL, 2323998695235782656ULL,  9241527722809755650ULL,
  189159985010188292ULL,  2310421375767019786ULL,  4647717014536733827ULL,
  5585659813035147264ULL, 1442911135872321664ULL,  140814801969667ULL,
  1188959108457300100ULL, 288815318485696640ULL,   758869733499076736ULL,
  234750139167147013ULL,  2305924931420225604ULL,  9403727128727390345ULL,
  9223970239903959360ULL, 309094713112139074ULL,   38290492990967808ULL,
  3461016597114651648ULL, 181289678366835712ULL,   4927518981226496513ULL,
  1155212901905072225ULL, 36099167912755202ULL,    9024792514543648ULL,
  4611826894462124048ULL, 291045264466247688ULL,   83880127713378308ULL,
  1688867174481936ULL,    563516973121544ULL,      9227888831703941123ULL,
  703691741225216ULL,     45203259517829248ULL,    693563138976596032ULL,
  4038638777286134272ULL, 865817582546978176ULL,   13835621555058516608ULL,
  11541041685463296ULL,   288511853443695360ULL,   283749161902275ULL,
  176489098445378ULL,     2306124759338845321ULL,  720584805193941061ULL,
  4977040710267061250ULL, 10097633331715778562ULL, 325666550235288577ULL,
  1100057149646ULL
};

static const int rook_relevant_bits[SQUARE_COUNT] = {
    12, 11, 11, 11, 11, 11, 11, 12,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    12, 11, 11, 11, 11, 11, 11, 12
};

// Precomputed bishop magics
static const unsigned long long bishop_magic_numbers[SQUARE_COUNT] = {
  9368648609924554880ULL, 9009475591934976ULL,     4504776450605056ULL,
  1130334595844096ULL,    1725202480235520ULL,     288516396277699584ULL,
  613618303369805920ULL,  10168455467108368ULL,    9046920051966080ULL,
  36031066926022914ULL,   1152925941509587232ULL,  9301886096196101ULL,
  290536121828773904ULL,  5260205533369993472ULL,  7512287909098426400ULL,
  153141218749450240ULL,  9241386469758076456ULL,  5352528174448640064ULL,
  2310346668982272096ULL, 1154049638051909890ULL,  282645627930625ULL,
  2306405976892514304ULL, 11534281888680707074ULL, 72339630111982113ULL,
  8149474640617539202ULL, 2459884588819024896ULL,  11675583734899409218ULL,
  1196543596102144ULL,    5774635144585216ULL,     145242600416216065ULL,
  2522607328671633440ULL, 145278609400071184ULL,   5101802674455216ULL,
  650979603259904ULL,     9511646410653040801ULL,  1153493285013424640ULL,
  18016048314974752ULL,   4688397299729694976ULL,  9226754220791842050ULL,
  4611969694574863363ULL, 145532532652773378ULL,   5265289125480634376ULL,
  288239448330604544ULL,  2395019802642432ULL,     14555704381721968898ULL,
  2324459974457168384ULL, 23652833739932677ULL,    282583111844497ULL,
  4629880776036450560ULL, 5188716322066279440ULL,  146367151686549765ULL,
  1153170821083299856ULL, 2315697107408912522ULL,  2342448293961403408ULL,
  2309255902098161920ULL, 469501395595331584ULL,   4615626809856761874ULL,
  576601773662552642ULL,  621501155230386208ULL,   13835058055890469376ULL,
  3748138521932726784ULL, 9223517207018883457ULL,  9237736128969216257ULL,
  1127068154855556ULL
};
static const int bishop_relevant_bits[SQUARE_COUNT] = {
    6, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 6
};

#ifdef __cplusplus
extern "C" {
  // Initialize magic bitboards
  CHESS_API void init_magic_bitboards(void);
  
  // Cleanup move tables
  CHESS_API void cleanup_magic_bitboards(void);
  
  // Get moves for sliding pieces
  unsigned long long get_rook_moves(int square, unsigned long long occupancy);
  unsigned long long get_bishop_moves(int square, unsigned long long occupancy);
}
#else
// Initialize magic bitboards
CHESS_API void init_magic_bitboards(void);

// Cleanup move tables
CHESS_API void cleanup_magic_bitboards(void);

// Get moves for sliding pieces
unsigned long long get_rook_moves(int square, unsigned long long occupancy);
unsigned long long get_bishop_moves(int square, unsigned long long occupancy);
#endif
#endif
